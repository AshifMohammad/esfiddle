name: Docker

on:
  push:
    # Publish `develop` as Docker `latest` image.
    branches:
      - develop
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

env:
  # TODO: Change variable to your image's name.
  GIT_REGISTRY: docker.pkg.github.com
  REPO_NAME: esfiddle/esfiddle
  IMAGE_NAME: esfiddle-docker

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build . --file Dockerfile
          fi

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Docker Login
        uses: azure/docker-login@v1
        with:
          login-server: $GIT_REGISTRY
          username: $GITHUB_ACTOR
          password: ${{ secrets.GITHUB_TOKEN }}
        
      - uses: actions/checkout@v2

      - name: Build and Push image
        run: |
          IMAGE_ID=$GIT_REGISTRY/$REPO_NAME/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "develop" ] && VERSION=latest
          
          #Date Time
          $DATETIME=$(date +%s)

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          echo DATETIME=$DATETIME

          docker build . --file Dockerfile --tag $IMAGE_ID:$DATETIME --tag $IMAGE_ID:$DATETIME
          docker push $IMAGE_ID
